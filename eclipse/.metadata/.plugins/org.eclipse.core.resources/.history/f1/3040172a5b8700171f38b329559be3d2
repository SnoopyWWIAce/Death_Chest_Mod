package com.snoopy_wwi_ace.death_mod;

import java.util.ArrayList;
import java.util.Random;

import cpw.mods.fml.common.eventhandler.EventPriority;
import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import net.minecraft.block.Block;
import net.minecraft.block.BlockChest;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntityChest;
import net.minecraft.world.World;
import net.minecraftforge.event.entity.living.LivingDeathEvent;
import net.minecraftforge.event.entity.player.PlayerEvent;

public class DeathHandler {

	private static final int OFFSET = 4;
	private static final int ARMOR_SLOTS = 4;
	private static final Block CHEST = Block.getBlockById(54);
	private static final int UPDATE_CLIENTS_AND_BLOCKS = 3;
	private static final int SEARCH_RANGE = 4;
	private static final int MAX_HEIGHT = 256;
	private static final String KEEP_INVENTORY = "keepInventory";

	@SubscribeEvent(priority = EventPriority.LOWEST)
	public void onDeathEvent(LivingDeathEvent event) {
		if (event.entity instanceof EntityPlayer
				&& !event.entity.worldObj.getGameRules().getGameRuleBooleanValue(KEEP_INVENTORY)) {
			handleInventory((EntityPlayer) event.entity);
		}
	}

	private void handleInventory(EntityPlayer player) {
		ArrayList<ItemStack> stacks = gatherInventory(player);
		if (!stacks.isEmpty()) {
			TileEntityChest chest = findChestLocation(player);
			if (chest == null)
				return;
			for (int i = 0; i < chest.getSizeInventory() && !stacks.isEmpty(); i++) {
				chest.setInventorySlotContents(i, stacks.get(stacks.size() - 1));
				stacks.remove(stacks.size() - 1);
			}
			if (!stacks.isEmpty()) {
				chest = findChestLocation(player);
				if (chest == null)
					return;
				for (int i = 0; i < chest.getSizeInventory() && !stacks.isEmpty(); i++) {
					chest.setInventorySlotContents(i, stacks.get(stacks.size() - 1));
					stacks.remove(stacks.size() - 1);
				}
			}
		}
	}

	private ArrayList<ItemStack> gatherInventory(EntityPlayer player) {
		ArrayList<ItemStack> stacks = new ArrayList<ItemStack>();
		InventoryPlayer inv = player.inventory;
		for (int i = 0; i < inv.getSizeInventory() - OFFSET; i++)
			if (inv.mainInventory[i] != null) {
				stacks.add(inv.mainInventory[i]);
				inv.mainInventory[i] = null;
			}
		for (int i = 0; i < ARMOR_SLOTS; i++)
			if (inv.armorInventory[i] != null) {
				stacks.add(inv.armorInventory[i]);
				inv.armorInventory[i] = null;
			}
		return stacks;
	}

}
